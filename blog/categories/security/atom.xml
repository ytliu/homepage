<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Security | Mctrain's Blog]]></title>
  <link href="http://ytliu.github.com/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://ytliu.github.com/"/>
  <updated>2012-11-14T15:09:31+08:00</updated>
  <id>http://ytliu.github.com/</id>
  <author>
    <name><![CDATA[Liu Yutao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Metasploit Learning Outset]]></title>
    <link href="http://ytliu.github.com/blog/2012/03/17/exploitation-learning-outset/"/>
    <updated>2012-03-17T15:35:00+08:00</updated>
    <id>http://ytliu.github.com/blog/2012/03/17/exploitation-learning-outset</id>
    <content type="html"><![CDATA[<p>这周开始看和学《Metasploit》，真是一个神器啊！原来这种工具还有一种比较学术的、很有正义感的名字叫"Peneration Test Tool"啊，不过也确实很有道理就是了，毕竟攻击与防范真是因人而异，其实我觉得如果要实现一个相对安全的系统就先拿所有这些所谓的Penetration tools测试一遍，虽然说从来就是先有矛再有盾，但毕竟如果能对抗所有已有的矛，那这个盾也足够强大了，至于那些新发明的矛，可以通过一些特征标识检测机制来减少，如果想彻底防范所有的攻击那是不可能的！当然啦，要通过现有的所有Penetration Tests困难还是挺大的，而且并不是所有人都有这么高的安全意识，这也就造成现在攻击泛滥、隐私无处藏身的危险境地。做安全的人必需地先懂得攻击，这是我自己理解的，懂得攻击的方式很多，可以从最底层开始，比较理论而深入地去学习每一种攻击的原理，也可以从一些现有的工具下手，来分析它们的漏洞查找手法和所找到的系统漏洞的特点，在我看来，太过于强调前者不是那么地贴近实际，而太过于依赖后者最多也就只能算是个名不见经传的小黑客，所以，我希望能联系两者，即能通过一些paper来比较深入地理解大部分攻击的原理和概念，又能熟练掌握一些或是开源或是收费的工具，更现实而直观地探测它们的可行性。经过了一段时间的survey，我发现了很多超级强大的工具，从各种角度来进行各种攻击，比如进行网络抓包的Wireshark，强调于局域网中间人攻击的Ettercap，简单而又强大的nmap，牛逼的密码破解和ARP攻击的windows下面的Cain，还有寻找漏洞的NeXpose和Nessus...最后我打算从Metasploit这个"神器"入手进行扩展，一个是因为这是一个开源而且被广泛应用的Framework，功能确实无比强大，整合了很多的module和plugin，而且《Metasploit》这本文档也写得很不错，不仅仅是介绍攻击方法，而且框架很清晰，从攻击的流程来进行说明，很有往下看下去的欲望。</p>

<p>在Metasploit这个Framework里面内置了很多plugin，比如前面提到的nmap，NeXpose，Nessus等等，而且它还提供了特别多information gathering和vulnerability scanning的模块你可以直接使用，并用<em>show options</em>来直观地查看它们的用法，当发现了某个漏洞，还可以用它内置的数不尽的payload进行exploit，更重要的是在exploit成功之后还有一个amazing的meterpreter来处理post-exploit的事物，全面控制target。当然啦，到目前为止我只看到这里，后面还有许多方面的介绍，实在是值得一读。而且，它还提供了一个ubuntu系统和一个window XP系统让你进行实验，毕竟攻击真实环境中的机器是不合法的。</p>

<p>这里记录了一些简单的笔记，基本上都能从书中找到，认真学习它肯定能有收获，这个工具的使用是我这个月的计划之一。不懂一个月能不能了解个大概:-)</p>

<pre><code>Terminology:
Exploit
    An exploit is the means by which an attacker take advantage of a flaw within a system, an application or a service.
    Common exploits include buffer overflows, web application vulnerabilities(such as SQL injection) and configuration errors
Payload
    A payload is code that we want the system to execute and that is to be selected and delivered by the framework.
Shellcode
    Shellcode is a set of instructions used as a payload when exploitation occurs, after which in most cases, a command 
    shell or a meterpreter shell will be provided.
Module
    A module in the context of this book is a piece of software that can be used by the Metasploit Framework.
Listener
    A listener is a component within Metasploit that waits for an incoming connection of some sort.
</code></pre>

<p>还有一些指令和module：</p>

<pre><code>Basic Scan
msf &gt; db_connect postgres:psw@127.0.0.1/msfdb
msf &gt; db_import file.xml
TCP Idle Scan: auxiliary/scanner/ip/ipidseq
Port scan: search portscan
SMB Scan: scanner/smb/smb_version
MS SQL Server Scan: scanner/mssql/mssql_ping
FTP Scan: scanner/ftp/ftp_version, auxiliary/scanner/ftp/anonymous
NeXpose
msf &gt; db_connect postgres:pwd@127.0.0.1/msfdb
msf &gt; load nexpose
msf &gt; nexpose_connect username:password@ip:3780 ok
msf &gt; nexpose_scan target_ip
msf &gt; hosts -c address
msf &gt; vulns
Nessus
msf &gt; db_connect postgres:pwd@127.0.0.1/msfdb
msf &gt; load nessus
msf &gt; nessus_connect username:password@ip:8834 ok
msf &gt; nessus_policy_list
msf &gt; nessus_scan new &lt;policy id&gt; &lt;scan name&gt; target_ip
msf &gt; nessus_scan_status
msf &gt; nessus_report_list
msf &gt; nessus_report_get &lt;ID&gt;
msf &gt; hosts -c address,svcs,vulns
Validating SMB Logins
msf &gt; use auxiliary/scanner/smb/smb_login
msf &gt; set RHOSTS/SMBUser/SMBPass
msf &gt; exploit
VNC Authentication
msf &gt; use auxiliary/scanner/vnc/vnc_none_auth
Open X11 Server
msf &gt; use auxiliary/scanner/x11/open_x11
#key-stroke logging using Back|Track's xspy tool:
cd /pentest/sniffers/xspy/
./xspy -display ip:port -delay 100
</code></pre>

<p>云云尔尔...</p>

<hr />

<p>另外，这周还看了一个关于彩虹表的介绍，确实是牛逼啊！很想下个120G的彩虹表下来，这里用wiki上的例子简单介绍下这个彩虹表吧，具体的参看<a href="http://en.wikipedia.org/wiki/Rainbow_table" title="wiki">wiki</a>, 之所以会出现彩虹表这个东西，主要是由time cost和space cost的trade-off引入的。简单来说背景是这样的（采用<a href="http://www.ha97.com/4009.html" title="rainbow table">这里</a>的例子）：大家知道如果要破解一个经过hash加密（比如md5）的密码，有两种最直观的方法：</p>

<pre><code>1. 枚举所有你可能想得到的明文，用md5算一遍，如果结果等于该密码则成功，这要消耗大量的计算资源和时间
2. 列一张包含所有明文映射成密文的表，通过表查找密文，这要占据大量的存储空间
</code></pre>

<p>举个例子，对于14位的大小写加数字（不包括特殊字符），组成的密码集合为（26x2+10）的14次方即12亿亿亿，如果每纳秒可以计算一个，需要4亿年时间，如果hash结果为128bit即16字节，存hash就需要10的26次方字节空间，如果1GB硬盘算五毛，需要5亿亿人民币！况且查那么大的表也需要时间，这个谁能受得了？如果再加上特殊字符就更不可想象了。</p>

<p>而rainbow table就是平衡了这两种资源，采用了一种叫Hash chain的技术:</p>

<p>假设我们知道这个加密的Hash function H，以及一个有限的密码集合P，在初始化阶段，我们定义另外一个hash function R，从P中随即选取一组密码，对每一个进行如下计算：</p>

<pre><code>aaaaaa --H-&gt; 281DAF40 --R-&gt; sgfnyd --H-&gt; 920ECF10 --R-&gt; kiebgt
</code></pre>

<p>进行k次，k的大小决定了chain的长度（k越大，最后计算的时间可能更多，单占用的存储空间可能更小，这取决于你的decision），我们仅仅存储第一个（aaaaaa，称为starting point）和最后一个（kiebgt，称为end point），之后当我们需要破解一个密码h（比如920ECF10）时，我们从h开始计算chain，从应用R开始：</p>

<pre><code>910ECF10 --R-&gt; kiebgt
</code></pre>

<p>当遇到一个值等于所记录的所有end point中的其中一个则从相应的start point开始重新计算一遍它的chain：</p>

<pre><code>aaaaaa --H-&gt; 281DAF40 --R-&gt; sgfnyd --H-&gt; 920ECF10
</code></pre>

<p>所以得到密码为sgfnyd。当然还有另外一种情况如下：</p>

<pre><code>FB107E70 --R-&gt; bvtdll --H-&gt; oEE80890 --R-&gt; kiebgt
</code></pre>

<p>虽然它的end point为kiebgt，但是910ECF10并不在这条chain中，这种情况称为false alarm，当遇到这种情况我们就忽略这个match，从kiebgt开始继续计算chain，当计算的次数超过k，则表示在我们的存储中没有相应的密码h，则从P中重新选取另外的集合计算chains。</p>

<p>这是rainbow table最基本的原理，当然它没有这么简单，还有许多需要考虑的问题，比如R如何选择，k要取多少……具体的细节请参考rainbow table wiki。</p>

<hr />

<p>这周还把电脑换成64位了，现在的本本已经有8g的内存啦！！！用起来好爽啊！硬盘也整理出来更多的空间，等暑假买了mac就可以有两台本本给我好好折腾了，想想都happy啊~不过装机的代价就是这周又没干什么正事，明天想好好看篇paper，这周选的是：</p>

<pre><code>Vanish: Increasing Data Privacy with Self-Destructing Data
</code></pre>

<p>主要是因为现在有一个关于attack-aware system的不成熟的idea，不过想想觉得可能比较不现实，总之先简单survey下吧。想idea真是一个苦差事啊，未来的5年怎么办啊！！！</p>

<hr />

<p>考研的国家线就快要出来啦！小呆一定要进复试然后被录取啊！现在突然感觉好寂寞啊，每天都不想出去就待在实验室，以后的生活一定不会是这样的单调，有点期待去交大的生活了，毕竟是去一个新的环境，认识新的人，开始新的生活。但是现在人生突然没有了激情啊。。。连打球都没了激情，小呆快点过来啊！木头现在好寂寞啊。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈某些攻击及其防范]]></title>
    <link href="http://ytliu.github.com/blog/2012/02/25/qian-tan-mou-xie-gong-ji-ji-qi-fang-fan/"/>
    <updated>2012-02-25T21:03:00+08:00</updated>
    <id>http://ytliu.github.com/blog/2012/02/25/qian-tan-mou-xie-gong-ji-ji-qi-fang-fan</id>
    <content type="html"><![CDATA[<p>很多时候我觉得攻击和防范的历史就像一部电视连续剧，不断出现的魔高一尺道高一丈，此消彼长，生生不息……</p>

<p>这篇博文的初衷来源于6.858中lecture2里面最后的一篇references:</p>

<pre><code>    INTERPRETER EXPLOITATION: POINTER INFERENCE AND JIT SPRAYING
</code></pre>

<p>这是一篇介绍两个技术<em>pointer inference</em>和<em>JIT spraying</em>的文章，关于这篇文章我应该会在之后详细介绍，这里想说的又是里面引出的一篇报告：</p>

<p><a href="http://www.azimuthsecurity.com/resources/bh2008_dowd_sotirov.pdf" title="bypassing">Bypassing Browser Memory Protections</a></p>

<p>里面介绍了微软在软硬件层面对5种攻击所作的防范，以及攻击者可以如何绕开这些防范。这里的描述方式也按文中一样按照防范措施来分类感觉会比较清晰点吧</p>

<h4><strong>前言</strong></h4>

<p>对于一个成功的攻击，有很大一部分是需要用到<em>buffer overflow</em>技术的，而<em>bf</em>分为很多，主要看你要覆盖什么内容，之后如何使得控制流变成你想要执行的代码，对于之后的这些攻击技术，也就出现了相应的防范策略和机制。但不管怎么说，这里所提到的所有攻击都源自于<em>bf</em>，没有它的攻击属于另外的范畴，这篇暂且不谈。</p>

<h4><strong>stack cookies(canaries) &amp; variable reordering</strong></h4>

<p><em>bf</em>最简单的攻击就是修改函数调用的return address，canaries即是在进入函数栈时在压入的return address之后再加入一个4位的随机数（canaries），如果攻击者改了return address那么canaries也会被改，那么系统在返回时将会报错。但是也有可能在函数返回之前调用一些函数变量，variable reordering则是将变量的顺序进行调整使得攻击者无法对本地变量进行overwrite，这两个技术都是靠编译器支持的，如果开启了这两种保护，栈上的结构将会变成这样：</p>

<p><img src="http://ytliu.github.com/images/2012-02-25-1.png" title="stack layout" alt="stack layout with or without GS protection" /></p>

<p>这两种机制的缺点很明显，对于canaries，它只能保护函数返回时的控制流变化，而且<em>canaries</em>也有可能被破解，对于<em>vr</em>它只支持有限种类的变量reordering，对于一些结构体的保护就不是很好。</p>

<h4><strong>SafeSEH</strong></h4>

<p>这是微软系统对于它们独特的<em>Exception handler</em>机制的保护，叫<em>Structured Exception Handler</em>，这里不想详细介绍，简单说就是在每个函数体的栈上除了一些本地变量之外还会存有一个叫做<em>Exception Handler Record</em>的东西，里面指向一个Exception Handler的链结构，当在函数执行过程中如果发生Exception，则会从这个record开始查找对应的handler。如果攻击者在overflow时将这个结构的handler的地址改成攻击代码的地址，则会在发生Exception时调用恶意代码。而SafeSEH用了两种方法<em>SEH handler validation</em>（维护一张表，在调用handler时检查是否是表中的合法handler）和<em>SEH chain validation</em>（enforce chain的一些特征使其在违反时能够被检查出来）。</p>

<h4><strong>Heap Protection</strong></h4>

<p>这是这篇文章的重点，因为我在这之前虽然听说过<em>heap overflow</em>，但也不清楚里面的细节，<a href="http://www.h-online.com/security/features/A-Heap-of-Risk-747161.html" title="a heap of risk">这篇文章</a>对此做了一个很详细的描述，这里简单介绍下:</p>

<p>文中举了个简单但是明了的例子，虽然不同系统中对heap的实现大同小异，但原理都是一样的。在本文的例子中，堆的结构是这样的：</p>

<p><img src="http://ytliu.github.com/images/2012-02-25-2.png" title="heap layout" alt="heap layout" /></p>

<p>每一个被回收的堆都有一个带有信息的头结构，里面包含了next, prev, size, used的信息，而在free操作过后都会有一个merge的操作，即将相邻的两个free的堆merge起来从而避免fragmentation，在这个merge操作中有一个非常关键的操作：</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hdr->next->next->prev = hdr->next->prev;</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>而系统在计算<em>next->prev</em>时会先得到next的地址然后加4，于是攻击者就可以通过buffer overflow将堆的头结构改成以下内容（这里要说明下，heap的overflow可以通过integer的overflow来实现，具体可参阅文章前半部分）：</p>

<p><img src="http://ytliu.github.com/images/2012-02-25-3.png" title="heap header layout" alt="heap header layout" /></p>

<p>将next中的地址指向栈中存放<em>return address + 4</em>的地址，然后<em>next + 4</em>即为return address，将其地址通过那步关键操作赋值成攻击者注入的恶意代码的地址，即可达到目的。</p>

<p>heap overflow有一个最大的缺陷就是需要攻击者对系统堆的实现，以及一些内存信息非常了解，而且如果heap若也被标志为NX，则该方法也没有用了。</p>

<h4><strong>DEP（NX）</strong></h4>

<p><em>DEP</em>（Data Execution Prevention）即为通常所说的<em>NX</em>（Non-eXecutable），让除了代码段之外其它地方的数据都不能执行，这在很大程度上防止了攻击者注入的恶意代码的执行，但其有以下几点缺陷：</p>

<pre><code>    * 有些程序就是需要除了代码段的其它section的指令运行，如果用了该技术则会不兼容；
    * return-oriented &amp; return-to-libc攻击。
</code></pre>

<h4><strong>ASLR</strong></h4>

<p><em>ASLR</em>（Address Space Layout Randomization）对一些object的地址做随机化，使得攻击者很难准确地overflow正确的信息，但攻击者并非对此毫无办法：</p>

<pre><code>    * 可以猜测，或者用穷举的办法（JIT spraying就是一个很好的例子）；
    * 可以运行一些代码来获得随机规律；
    * 有时候并不需要知道确切的地址，只要知道相对值就行了。
</code></pre>

<hr />

<p>以上是对一些防范和攻击的简单介绍，这周还看了一篇paper叫</p>

<pre><code>    XFI: SOftware Guards for System Address Space
</code></pre>

<p>是由微软和UCB在OSDI'06发表的，应该说这是一篇很牛逼的文章，但是可能是因为我功力太浅，实在没怎么看懂，这里就将里面提出的7个properties列出来，如果有兴趣也可以参考MIT的<a href="http://pdos.csail.mit.edu/6.858/2011/lec/l03-xfi.txt">6.858课程lecture3</a>中对这篇文章提出的几个问题。</p>

<p><strong>external properties</strong>:</p>

<p><em>P1. memory-access constraints</em>: memory accesses are either into a). the memory of the XFI module, or b). into what host system has granted. read/write/execute handled separately, no write to XFI module's code</p>

<p><em>P2. interface restrictions</em>: control cannot flow out of XFI's code, except via calls to a set of prescribed support routines, and via returns to external call-site.</p>

<p><em>P3. scoped-stack integrity</em>: a). stack register points to at least a fixed amount of writable stack memory? b). accurately reflect function calls, returns and exception; c). Windows stack exception frames are well formed, and linked to each other.</p>

<p><em>P4. simplified instruction semantics</em>: certain machine-code instructions (dangerous, privileged instructions) can never be executed, certain other machine-code instructions may be executed only in a context taht constrains their effects.</p>

<p><em>P5. system-environment integrity</em>: certain aspects of system environment are subject to invariants.</p>

<p><strong>internal properties</strong>:</p>

<p><em>P6. control-flow integrity</em>: execution must follow a static, expected control-flow graph, even on computed calls and jumps.</p>

<p><em>P7. program-data integrity</em>: certain module-global and function-local variables can be accessed only via static references from the proper instructions in the XFI module.</p>

<p>文中之后所说的细节很多也都是通过<em>P6</em>和<em>P7</em>来保证整个系统7个properties的，所以说<em>control-flow integrity</em>和<em>data integrity</em>还是非常重要的，关于CFI，相信这一篇也是理解XFI的关键一文：</p>

<pre><code>    Contro-flow Integrity: Principles, Implementations, and Applications
</code></pre>

<p>打算在接下来的一周认真读一下。</p>

<p>另外还有一个由Robert C. Seacord做的presentation：</p>

<pre><code>    Pointer Subterfuge: Secure Coding in C and C++
</code></pre>

<p>也详细地介绍了在C和C++语言中可能出现的通过篡改pointer来实现攻击的例子，主要介绍了<em>GOT（Global Offset Table） Entries</em>, <em>The .dtors Section</em>, C++中的<em>Virtual Pointer</em>, <em>atexit()</em>和<em>on_exit()</em>, <em>setjump()</em>和<em>longjump()</em>，还有就是之前说的<em>SEH（Structured Exception Handler）</em>，在这个presentation里面详细介绍了它们的机制和用法，以及攻击者如何利用它们进行攻击的手段等等，是一篇很有趣的报告。</p>

<hr />

<p>然后简单讲下Oakland'11吧，上周把<em>IEEE Oakland'11</em>（四大安全会议之一，其余三个为ACM CCS, USENIX Security and ISOC NDSS）的paper简单浏览的一遍，根据题目挑选了20来篇看了下abstract和introduction，安全会议果然和系统相关会议有蛮大区别的，大部分paper主要是针对一个很小但是很具体的问题进行阐述并解决，不过说实话，我对里面的大部分都不是很有兴趣，但是里面一些paper提出来的一些概念，确实挺让我焕然一新，比如在Hardware Security的Section里面提到的硬件厂商或第三方的恶意backdoor，比如<em>HomeAlone</em>中利用Side-Channel来进行防范，还有之前说过的<em>Virtuoso</em>，<em>PRISM</em>中提到的和我们之前想过的细粒度权限控制的想法有着相似但不同称法的<em>Multi-Level Secure（MLS）</em>，以及<em>RePriv</em>中关于用户隐私性和个性化的平衡，还有那些当今比较热门的话题，如<em>Cashier-as-a-Service（CaaS）</em>、<em>Sybil Attack</em>、<em>Mobile Privacy（location privacy）</em>、<em>Side-Channel Attack</em>，甚至是我不是很感兴趣的<em>Formalization</em>，都让我对安全这个领域有了更进一步的了解。之后我又翻阅了下NDSS'12的paper，发现里面一些更让我感兴趣的知识，这也算是我下周的打算。</p>

<hr />

<p>总之下周注定要成为更忙的一周，重新奋斗hc，加上各种计划各种paper，凡事尽力吧，也无需勉强自己。</p>

<p>最后用这周译言上的那篇文章结尾：<a href="http://select.yeeyan.org/view/216596/248984" title="top five regrets of the dying">Top five regrets of the dying</a></p>

<p><blockquote><p>1. I wish I'd had the courage to live a life true to myself, not the life others expected of me;<br/>2. I wish I hadn't worked so hard;<br/>3. I wish I'd had the courge to express my feelings;<br/>4. I wish I had stayed in touch with my friends;<br/>5. I wish that I had let myself be happier.</p></blockquote></p>

<p>人生真的是如此短暂，"死而无憾"绝非易事，只希望在活着的时候对得起自己，不辜负亲人、朋友，其它的一切又算得了什么呢？</p>
]]></content>
  </entry>
  
</feed>
