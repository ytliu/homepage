---
layout: post
title: "Base64编码"
date: 2013-01-06 12:42
comments: true
categories: Security
---

这两天看[Jiang](http://www.csc.ncsu.edu/faculty/jiang/ "Xuxian Jiang")团队对[AnserverBot](http://www.csc.ncsu.edu/faculty/jiang/AnserverBot/ "AnserverBot Malware")的一篇详细的[分析](http://www.csc.ncsu.edu/faculty/jiang/pubs/AnserverBot_Analysis.pdf "AnserverBot Analysis")中提到AnserverBot中对很多数据（比如C&C server的url等）进行了Base64编码，于是，我对这种编码进行了了解，并根据他们实现的python解码脚本，写了一个ruby的解码脚本。

<!-- more -->

#### Base64

以下资料基本上来自于[wiki](http://en.wikipedia.org/wiki/Base64 "Base64")

Base64用于对字符串进行编码，并将该编码通过网络传输出去，源于`MIME`内容（如邮件）的编码，用于防止内容在网络传输中被篡改。

接下来会通过一个示例进行说明：

首先我们会有一张Base64 index table:

![Base64 index table](http://ytliu.info/images/2013-01-06-1.png "Base64 index table")

该表记录了0-63（即000000-111111)对应的ASCII字符。

然后我们有一段需要翻译的字符串，一段从[Thomas Hobbes](http://en.wikipedia.org/wiki/Thomas_Hobbes "Thomas Hobbes") [Leviathan](http://en.wikipedia.org/wiki/Leviathan_book "Leviathan")的引用：

> Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.

如果将每一个字母的ASCII码作为一个8-bit的二进制数展开的话会得到一个二进制串，比如我们`Man`的三个字母`M`、`a`、`n`的ASCII码分别为`77`、`97`、`110`，展开二进制并连起来既得到`010011010110000101101110`。然后我们将这个3x8的bit分成4x6，并将每6个bit组成的数字记下来，然后通过查询前面的那张*Base64 index table*即可得到四个字符`TWFu`，也就是`Man`的Base64表达形式。如下图所示：

![Base64 example](http://ytliu.info/images/2013-01-06-2.png "Base64 example")

当然这张*Base64 index table*可以采用任意的字母数字顺序，而不用按照这种顺序，只要解码的时候用同一张index table就可以了。

还有一点要注意的是如果字符的数目不是3的倍数该怎么办？也就是说最后一个block也有可能是1个字符或者2个字符。这个时候就需要在后面再加0来进行补齐了，然后再用Base64的规则进行转换，在编码后的base64文本后加上一个或两个`=`号，代表补足的字节数。也就是说，当最后剩余1个字符时，最后一个6位的base64字节块有四位是0值，最后附加上两个等号；如果最后剩余2个字符时，最后一个6位的base64字节块有两位是0值，最后附加一个等号。

#### Base64 decode by Ruby

在ruby中可以通过`requite 'base64'`来很方便地对Base64字符串进行解码，比如在AnserverBot中，采用了`STvJjktoVFZ9f0PGlicqy3xK7zH8ruXdn5WwDRIeb1UmEgOhYs2NpLC4QBa6AM+/_`的*index table*进行编码，于是ruby程序如下所示：

{% codeblock lang:ruby %}
# decrypt str encoded by base64
# ARGV[0] translate command (0 for string, 1 for file)
# ARGV[1] translate string or file
# ARGV[2] my_base64chars if exist


require 'base64'

BEGIN { puts "Hello!\n" }

cmd = ARGV[0].to_i

if ARGV.size < 2
	puts "Usage: ruby #{$0} [0|1] [str|file] [base64chars]"
	exit
end

if cmd == 0
	s = ARGV[1]
elsif cmd == 1
	f = ARGV[1]
	s = File.read(f)
end

puts "\ntranslate string is:\n#{s}"

std_base64chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="

if (ARGV[2] != nil) and (ARGV[2].size >= 65)
	my_base64chars = ARGV[2]
else
	my_base64chars  = "STvJjktoVFZ9f0PGlicqy3xK7zH8ruXdn5WwDRIeb1UmEgOhYs2NpLC4QBa6AM+/_"
end

puts "\ntranslate str according to #{my_base64chars}"

s = s.tr(my_base64chars, std_base64chars)

data = Base64.decode64(s)
puts "\ntranslated str is #{data}\n"

END { puts "\nBye!" }
{% endcodeblock %}

其中`s.tr(my_base64chars, std_base64chars)`是将自定义的*index table*和标准*index table*进行下转换，将字符串中的字符用标准*index table*中对应的字符进行替换，然后再通过`Base64.decode64(s)`进行解码。

整个过程还是很简单的。
